{"version":3,"sources":["pages/Counter.module.css","redux/api/counterAPI.ts","redux/reducers/counterSlice.ts","redux/store.ts","pages/LogIn.tsx","pages/Home.tsx","redux/hooks.ts","pages/Counter.tsx","Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","store","configureStore","reducer","counterReducer","LogIn","formik","useFormik","initialValues","email","password","onSubmit","values","console","log","Container","maxWidth","Box","py","style","to","mt","handleSubmit","TextField","id","type","onChange","handleChange","label","fullWidth","margin","Button","variant","disabled","isSubmitting","Boolean","submitCount","isValid","Home","useAppSelector","useSelector","Counter","count","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","aria-label","onClick","textbox","e","target","asyncButton","getState","Router","basename","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a369323.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3Zhru\",\"value\":\"Counter_value__aYgzZ\",\"button\":\"Counter_button__1H4Hs\",\"textbox\":\"Counter_textbox__2YnML\",\"asyncButton\":\"Counter_asyncButton__8Wqjj Counter_button__1H4Hs\"};","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../store'\nimport { fetchCount } from '../api/counterAPI'\n\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport counterReducer from './reducers/counterSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { useFormik } from 'formik'\n\nconst LogIn = () => {\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    onSubmit: async (values, actions) => {\n      console.log(values)\n    },\n  })\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box py={4}>\n        <Box style={{ maxWidth: 550 }}>\n          <Link to=\"/home\">Home</Link>, <Link to=\"/counter\">Counter</Link>\n          <Box mt={2.5}>\n            <form onSubmit={formik.handleSubmit}>\n              <TextField\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                label=\"Email address\"\n                fullWidth\n                margin=\"dense\"\n              />\n              <TextField\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n                label=\"Password\"\n                fullWidth\n                margin=\"dense\"\n              />\n              <Box mt={3.5}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  disabled={\n                    formik.isSubmitting ||\n                    (Boolean(formik?.submitCount) && !formik.isValid)\n                  }\n                >\n                  Log in\n                </Button>\n              </Box>\n            </form>\n          </Box>\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n\nexport default LogIn\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\n\nconst Home = () => {\n  return (\n    <Container maxWidth=\"md\">\n      <Box py={4}>\n        <Link to=\"/\">Log In</Link>, <Link to=\"/counter\">Counter</Link>\n      </Box>\n    </Container>\n  )\n}\n\nexport default Home\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from '../redux/reducers/counterSlice'\nimport styles from './Counter.module.css'\n\nfunction Counter() {\n  const count = useAppSelector(selectCount)\n  const dispatch = useAppDispatch()\n  const [incrementAmount, setIncrementAmount] = useState('2')\n\n  const incrementValue = Number(incrementAmount) || 0\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n      <div className={styles.row}>\n        <Link to=\"/\">Log In</Link>,&nbsp;<Link to=\"/home\">Home</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Counter\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport LogIn from './pages/LogIn'\nimport Home from './pages/Home'\nimport Counter from './pages/Counter'\n\nconst Router = () => (\n  <BrowserRouter basename={'/typescript-template'}>\n    <Switch>\n      <Route exact path=\"/\">\n        <LogIn />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route path=\"/counter\">\n        <Counter />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Router\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nimport Router from './Router'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}