{"version":3,"sources":["redux/api/counter.ts","redux/reducers/counter.ts","redux/api/login.ts","redux/reducers/login.ts","redux/store.ts","redux/hooks.ts","pages/LogIn.tsx","pages/Home.tsx","pages/Counter.tsx","Router.tsx","App.tsx","reportWebVitals.ts","index.tsx","pages/Counter.module.css"],"names":["fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","apiService","axios","create","baseURL","headers","fetchLogin","credentials","reject","get","then","post","result","catch","error","loginAsync","loginSlice","auth","access_token","user","logout","rejected","selectToken","login","selectUser","store","configureStore","reducer","counterReducer","loginReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","LogIn","token","dispatch","formik","useFormik","initialValues","email","password","onSubmit","values","setSubmitting","unwrapResult","console","log","to","Container","maxWidth","Box","py","style","mt","handleSubmit","TextField","id","type","onChange","handleChange","label","fullWidth","margin","Button","variant","disabled","isSubmitting","Boolean","submitCount","isValid","Home","Typography","gutterBottom","display","profile","full_name","country","onClick","Counter","count","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","aria-label","textbox","e","target","asyncButton","getState","Router","basename","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6705c821.chunk.js","sourcesContent":["// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  )\n}\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../store'\nimport { fetchCount } from '../api/counter'\nexport interface CounterState {\n  value: number\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n}\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount)\n    // The value we return becomes the `fulfilled` action payload\n    return response.data\n  }\n)\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.value += action.payload\n      })\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd =\n  (amount: number): AppThunk =>\n  (dispatch, getState) => {\n    const currentValue = selectCount(getState())\n    if (currentValue % 2 === 1) {\n      dispatch(incrementByAmount(amount))\n    }\n  }\n\nexport default counterSlice.reducer\n","import axios from 'axios'\n\nconst apiService = axios.create({\n  baseURL: 'http://65.0.121.216:81/api/',\n  headers: {\n    'Access-Control-Allow-Origin': '*',\n  },\n})\n\nexport const fetchLogin = (credentials: object) => {\n  return new Promise<{ data: object }>((resolve, reject) => {\n    apiService.get('../sanctum/csrf-cookie').then(() => {\n      apiService\n        .post('/login', credentials)\n        .then((result) => resolve({ data: result.data }))\n        .catch((error) => reject(error))\n    })\n  })\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { fetchLogin } from '../api/login'\nimport { RootState } from '../store'\nimport { User } from '../../types'\n\nexport interface Auth {\n  access_token: string\n  user: User | null\n}\nexport interface Login {\n  auth: Auth\n  status: 'idle' | 'loading' | 'failed'\n}\n\nconst initialState: Login = {\n  auth: {\n    access_token: '',\n    user: null,\n  },\n  status: 'idle',\n}\n\nexport const loginAsync = createAsyncThunk(\n  'login/fetchLogin',\n  async (credentials: object) => {\n    const response = await fetchLogin(credentials)\n    return response.data\n  }\n)\n\nexport const loginSlice = createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.auth.access_token = ''\n      state.auth.user = null\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loginAsync.pending, (state) => {\n        state.status = 'loading'\n      })\n      .addCase(loginAsync.fulfilled, (state, action) => {\n        state.status = 'idle'\n        state.auth = action.payload as Auth\n      })\n      .addCase(loginAsync.rejected, (state) => {\n        state.status = 'idle'\n      })\n  },\n})\n\nexport const selectToken = (state: RootState) => state.login.auth.access_token\nexport const selectUser = (state: RootState) => state.login.auth.user\n\nexport const { logout } = loginSlice.actions\n\nexport default loginSlice.reducer\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport counterReducer from './reducers/counter'\nimport loginReducer from './reducers/login'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    login: loginReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import React from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { useFormik } from 'formik'\n\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { loginAsync, selectToken } from '../redux/reducers/login'\n\nconst LogIn = () => {\n  const token = useAppSelector(selectToken)\n  const dispatch = useAppDispatch()\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    onSubmit: async (values, actions) => {\n      actions.setSubmitting(true)\n      try {\n        const result = await dispatch(loginAsync(values))\n        await unwrapResult(result)\n      } catch (error) {\n        console.log(error)\n      } finally {\n        actions.setSubmitting(false)\n      }\n    },\n  })\n\n  if (token) return <Redirect to=\"/home\" />\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box py={4}>\n        <Box style={{ maxWidth: 550 }}>\n          <Link to=\"/home\">Home</Link>,&nbsp;<Link to=\"/counter\">Counter</Link>\n          <Box mt={2.5}>\n            <form onSubmit={formik.handleSubmit}>\n              <TextField\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                onChange={formik.handleChange}\n                value={formik.values.email}\n                label=\"Email address\"\n                fullWidth\n                margin=\"dense\"\n              />\n              <TextField\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                onChange={formik.handleChange}\n                value={formik.values.password}\n                label=\"Password\"\n                fullWidth\n                margin=\"dense\"\n              />\n              <Box mt={3.5}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  disabled={\n                    formik.isSubmitting ||\n                    (Boolean(formik?.submitCount) && !formik.isValid)\n                  }\n                >\n                  Log in\n                </Button>\n              </Box>\n            </form>\n          </Box>\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n\nexport default LogIn\n","import React from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { logout, selectToken, selectUser } from '../redux/reducers/login'\n\nconst Home = () => {\n  const dispatch = useAppDispatch()\n  const token = useAppSelector(selectToken)\n  const user = useAppSelector(selectUser)\n\n  if (!token) return <Redirect to=\"/\" />\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box py={4}>\n        <Link to=\"/\">Log in</Link>,&nbsp;<Link to=\"/counter\">Counter</Link>\n        <Box mt={2.5}>\n          <Typography variant=\"h6\" gutterBottom>\n            <Typography variant=\"body2\" display=\"inline\" gutterBottom>\n              Name:&nbsp;\n            </Typography>\n            {user?.profile.full_name}\n          </Typography>\n          <Typography variant=\"h6\" gutterBottom>\n            <Typography variant=\"body2\" display=\"inline\" gutterBottom>\n              Email:&nbsp;\n            </Typography>\n            {user?.email}\n          </Typography>\n          {user?.profile.country && (\n            <Typography variant=\"h6\" gutterBottom>\n              <Typography variant=\"body2\" display=\"inline\" gutterBottom>\n                Country:&nbsp;\n              </Typography>\n              {user?.profile.country}\n            </Typography>\n          )}\n        </Box>\n        <Box mt={3.5}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              dispatch(logout())\n            }}\n          >\n            Log out\n          </Button>\n        </Box>\n      </Box>\n    </Container>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styles from './Counter.module.css'\n\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from '../redux/reducers/counter'\n\nfunction Counter() {\n  const count = useAppSelector(selectCount)\n  const dispatch = useAppDispatch()\n  const [incrementAmount, setIncrementAmount] = useState('2')\n\n  const incrementValue = Number(incrementAmount) || 0\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n      <div className={styles.row}>\n        <Link to=\"/\">Log In</Link>,&nbsp;<Link to=\"/home\">Home</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Counter\n","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport LogIn from './pages/LogIn'\nimport Home from './pages/Home'\nimport Counter from './pages/Counter'\n\nconst Router = () => (\n  <BrowserRouter basename={'/typescript-template'}>\n    <Switch>\n      <Route exact path=\"/\">\n        <LogIn />\n      </Route>\n      <Route path=\"/home\">\n        <Home />\n      </Route>\n      <Route path=\"/counter\">\n        <Counter />\n      </Route>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Router\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nimport Router from './Router'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3Zhru\",\"value\":\"Counter_value__aYgzZ\",\"button\":\"Counter_button__1H4Hs\",\"textbox\":\"Counter_textbox__2YnML\",\"asyncButton\":\"Counter_asyncButton__8Wqjj Counter_button__1H4Hs\"};"],"sourceRoot":""}